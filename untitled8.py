# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CpgR_bLCYi-5hbw1XyHQr_4pyEcEyglP
"""

# What is the role of try and exception block?
''' Ans. Try Block: The code that might raise an exception is placed within a "try" block. This is the part of the code where you anticipate potential errors. If an error occurs within the "try" block, the program doesn't immediately stop. Instead, it moves to the "except" block.

Except Block: The "except" block contains code that specifies what actions to take if a specific type of exception occurs within the "try" block. It acts as a way to handle the error gracefully and provide an alternative course of action rather than crashing the program'''

# What is the syntax for a basic try-except block?
'''
try:
    # Code that might raise an exception
    # ...
except ExceptionType:
    # Code to handle the exception
    # '''

'''What happens if an exception occurs inside a try block and there is no matching
except block?'''
'''Ans.
If an exception occurs inside a try block and there is no matching except block to handle that specific type of exception, the program will terminate, and an unhandled exception error message will be displayed. This can lead to an abrupt halt of the program's execution.'''

'''
What is the difference between using a bare except block and specifying a specific
exception type?
'''
''' Ans
When you use a bare except block, it catches all types of exceptions that can occur within the try block. This includes both expected and unexpected exceptions. While this can prevent your program from crashing, it also makes it difficult to identify the specific cause of the error, potentially leading to poor debugging and troubleshooting.
When you specify a specific exception type, such as except ValueError: or except FileNotFoundError:, you're being more precise about which type of exception you're prepared to handle. This approach provides better error feedback and helps you understand the exact nature of the issue. It's considered a best practice because it allows you to address different exceptions in appropriate ways, improving code quality and maintainability.'''

# Can you have nested try-except blocks in Python? If yes, then give an example.
try:
    outer_value = int(input("Enter an integer: "))
    try:
        result = 10 / outer_value
    except ZeroDivisionError:
        print("Error: Division by zero in inner block")
except ValueError:
    print("Error: Invalid input in outer block")

# Can we use multiple exception blocks, if yes then give an example.
try:
    value = int(input("Enter a number: "))
    result = 10 / value
except ValueError:
    print("Invalid input: Please enter a valid number.")
except ZeroDivisionError:
    print("Error: Division by zero.")
except Exception as e:
    print("An unexpected error occurred:", e)

'''
Write the reason due to which following errors are raised:
a. EOFError
b. FloatingPointError
c. IndexError
d. MemoryError
e. OverflowError
f. TabError
'''
'''
Ans-
a. EOFError: This error is raised when the "end of file" (EOF) is reached unexpectedly while trying to read input from a file or the console. It typically occurs when you're trying to read more input than is available.

b. FloatingPointError: This error occurs during arithmetic operations involving floating-point numbers. It's raised when an exceptional condition arises during floating-point arithmetic, such as division by zero or overflow.

c. IndexError: This error is raised when you try to access an index of a sequence (like a list or a string) that is out of range or doesn't exist. For example, trying to access an element at an index that is larger than the length of the sequence.

d. MemoryError: This error occurs when a program runs out of memory, meaning it's trying to allocate more memory than the system has available. This usually happens when trying to create large data structures or allocate excessive memory.

e. OverflowError: This error occurs when a numeric operation results in a value that is too large to be represented within the given numeric type. For example, trying to calculate a result that exceeds the maximum value that can be stored in the data type.

f. TabError: This error occurs when there is an issue with the indentation in Python code. It specifically arises when tabs and spaces are mixed inconsistently for indentation in a single block of code, causing an indentation-related error.
g. ValueError: Raised when a function receives an argument of the correct type but with an invalid value, or when an operation encounters an inappropriate value.
'''

'''
Write code for the following given scenario and add try-exception block to it.
a. Program to divide two numbers
b. Program to convert a string to an integer
c. Program to access an element in a list
d. Program to handle a specific exception
e. Program to handle any exception
'''

# Ans
# a. Program to Divide Two Numbers:
try:
    numerator = int(input("Enter the numerator: "))
    denominator = int(input("Enter the denominator: "))
    result = numerator / denominator
    print("Result:", result)
except ZeroDivisionError:
    print("Error: Division by zero")
except ValueError:
    print("Error: Invalid input (Please enter valid integers)")

# b. Program to Convert a String to an Integer:
try:
    string_num = input("Enter a number: ")
    integer_num = int(string_num)
    print("Converted integer:", integer_num)
except ValueError:
    print("Error: Invalid input (Could not convert to integer)")

# c. Program to Access an Element in a List:
try:
    my_list = [10, 20, 30]
    index = int(input("Enter an index: "))
    element = my_list[index]
    print("Element at index", index, ":", element)
except IndexError:
    print("Error: Index out of range")
except ValueError:
    print("Error: Invalid index (Please enter a valid integer)")

# d. Program to Handle a Specific Exception:
try:
    value = int(input("Enter a positive number: "))
    if value <= 0:
        raise ValueError("Value must be positive")
    print("Value:", value)
except ValueError as ve:
    print("Error:", ve)

# e. Program to Handle Any Exception:
try:
    num = int(input("Enter a number: "))
    result = 10 / num  # This line may cause ZeroDivisionError or ValueError
    print("Result:", result)
except Exception as e:
    print("An error occurred:", e)

